help()
demo()
setwd("C:/Users/David Smith/Desktop/SWC_fall2017/R_intro")
3+5
sqrt(64)
sqrt(64)
sqrt(64)
sqrt(64)
sqrt(64)
sqrt(64)
print("Hello World")
print(Hello World)
print(4)
print("this is my string")
print(12)
print(12)
print("hello world)
print('!')
sdkjgh
print("hello world)
#Packages
install.packages("knitr")
library(knitr)
?print
help(mean)
#Variable.
x = 3+5
#Variable.
x = 3+5
#Variable.
x <- 3+5
#Variable.
name <- "Jane"
name
price <- 3.99
price
blank <-
blank <-
price
print(price)
mass <- 47.5
?MASS::
help(MASS::)
ls()
rm(x)
rm(mass)
rm()#Values
rm()
rm(list = ls())
res <- sqrt(64)
res
rm(res)
res = sqrt(65)
res
res = sqrt(64)
res
res
age <- 45
age
length(age)
str(age)
typeof(age)
height <- L5
Score <- 79
is.integer(score)
is.integer(score)
is.integer(score)
is.integer(score)
Score <- 79
is.integer(score)
Score <- 79
is.integer(score)
Score <- 79
is.integer(score)
score <- 79
is.integer(score)
typeof(is.integer(score))
rm(Score)
#DATA STRUCTURES
#Creating a multi-element value.
v <- c(1:10)
v
w <- c(1,4,8)
w
length(v)
str(v)
head(v)
tail(v)
head(v, n=2)
tail(v, n=2)
max(v)
max(w)
mean(v)
median(v)
v <- c(v,56)
v
mean(v)
v <- c(v, 3.4)
v
#Vectorization
v1 <- v*2
v1
#change data type
v2 <- as.character(v1)
v2
v3 <- as.integer(v)
v3
v3 <- as.integer(v1)
v3
#matrices***
m <- matrix(c(1:18), 3, 6)
m
m <- matrix(c(1:18), 3, 7)
m
#matrices***
m <- matrix(c(1:18), 3, 6)
m
dim(m)
dim(m,6,3)
f <- factor(c("M","F","F")) #Factor
str(f)
#list
l <- list("India", 1952, 86783)
l
str(l)
length(l)
E1 <- list("chicken", "soup", "salad", "tea")
E2 <- factor("liquid","solid")
#Element 3 is a vector that records the cost of each menu item:
E3 <- c(4.99, 2.99, 3.29, 1.89)
E1
E2
E2
E2 <- factor("solid","liquid","solid","liquid")
E2
E2 <- factor(c("solid","liquid","solid","liquid"))
E2
E2 <- factor(c("s","l","s","l"))
E2
E2 <- factor(c("solid","liquid","solid","liquid"))
E3
menu <- matrix(c(E1,E2,E3),4,3)
menu
myOrder <- matrix(c(E1,E2,E3),4,3)
myOrder
E2 <- factor(c("solid","liquid","solid","liquid"))
myOrder
myOrder <- c(E1,E2,E3)
myOrder
myOrder <- matrix(c(E1,E2,E3),4,3)
myOrder
myOrder <- list(c(E1,E2,E3))
myOrder
myOrder <- list(E1,E2,E3)
myOrder
print(myOrder)
myOrder <- matrix((E1,E2,E3),4,3)
myOrder <- matrix(c(E1,E2,E3),4,3)
print(myOrder)
myOrder <- matrix(c(items,itemsPhase,itemsPrice),4,3)
print(myOrder)
items <- c("chicken", "soup", "salad", "tea")
itemsPhase <- factor(c("solid","liquid","solid","liquid"))
- c(4.99, 2.99, 3.29, 1.89)
myOrder <- matrix(c(items,itemsPhase,itemsPrice),4,3)
myOrder
str(age) #Returns structure of "age"
typeof(age)
help(double)
help(integer)
score <- 79
is.integer(score)
is.double(score)
typeof(is.integer(score))
str(v)
#DATA STRUCTURES
#Creating a multi-element value.
v <- c(1:10) #List concatenating from 1 to 10
str(v)
x <- c("turkey","potatoes","casserole")
max(x)
help(vector)
?vector
### Commands for Subsetting and Writing Simple R Scripts
menuItems <- c("chicken","soup","salad","tea")
menuType <- factor(c("(s)","(l)","(s)","(l)")
menuCosts <- c(4.99, 2.99, 3.29, 1.89)
myOrder <- list(menuItems, menuType, menuCosts)
myOrder
menuCosts <- c(4.99, 2.99, 3.29, 1.89)
source('~/.active-rstudio-document', echo=TRUE)
length(myOrder)
str(myOrder)
myOrder <- list(menuItems, menuType, menuCosts)
menuType <- factor(c("(s)","(l)","(s)","(l)")
myOrder <- list(menuItems, menuType, menuCosts)
menuType <- factor(c("(s)","(l)","(s)","(l)"))
myOrder <- list(menuItems, menuType, menuCosts)
myOrder
length(menuItems)
length(menuT)
length(menuType)
length(menuCosts)
#Data frames
myOrder_df <- data.frame(menuItems,menuType,menuCosts)
myOrder_df
myOrder <- list(c(items,itemsPhase,itemsPrice))
myOrder
myOrder
# Subsetting
# By Position Index
v <- c(10:20)
v
v[7]
myOrder_df[2]
v[7:10]
v[7:]
v[7:tail]
v[7:tail(v)]
v[-c(7:10)]
v[1]
myOrder[1]
myOrder[3]
myOrder_df
menuType <- factor(c("solid","liquid","solid)","liquid"))
myOrder_df
myOrder <- list(menuItems, menuType, menuCosts)
# Data frames.
myOrder_df <- data.frame(menuItems,menuType,menuCosts)
myOrder_df
menuType <- factor(c("solid","liquid","solid","liquid"))
myOrder <- list(menuItems, menuType, menuCosts)
# Data frames.
myOrder_df <- data.frame(menuItems,menuType,menuCosts)
myOrder_df
myOrder_df[3,3]
myOrder_df[,3]
myOrder_df[1,]
myOrder_df[3,]
myOrder_df[,3]
myOrder_df[3]
# By Name
myOrder_df$menuItems
# By Name
myOrder_df$menuType
3 /< 4
v <- c(2,3,4,5,6,5,6)
v1 <- v[v==5]
v1
v1 <- v[v<5]
v1
df1 <- myOrder_df[menuItems]
df1
df1 <- myOrder_df[menuCosts]
df1
df1 <- myOrder_df[myOrder_df$menuType=="liquid"]
df1
df1
# Data frames.
myOrder_df <- data.frame(menuItems,menuType,menuCosts)
myOrder_df
df1 <- myOrder_df[myOrder_df$menuType=="liquid",]
df1
df1 <- myOrder_df[myOrder_df$menuType=="liquid"] #Gives list of all items with menuType=liquid
df1
df2 <- myOrder_df[myOrder_df$menuCosts<"3.00"]
df2
df2 <- myOrder_df[myOrder_df$menuCosts<"3.00",]
df2
df1 <- myOrder_df[myOrder_df$menuType=="liquid",] #Gives list of all items with menuType=liquid
df1
df2 <- myOrder_df[myOrder_df$menuCosts<"3.00",]
df2
df2 <- myOrder_df[myOrder_df$menuCosts<3.00,]
df2
df3 <- myOrder_df[myOrder_df$1==chicken,]
df1 <- myOrder_df[myOrder_df$menuType=="liquid"] #Gives list of all items with menuType=liquid
df1
myOrder_df[2]
myData <- read.table("gapminder.txt", header=TRUE)
myData <- read.table("gapminder.txt", header=TRUE)
myData <- read.table("C:/Users/David Smith/Desktop/SWC_fall2017/Data/gapminder.txt", header=TRUE)
myData <- read.table("../Data/gapminder.txt", header=TRUE)
myData[1:2,]
myData[myData$country=="United States"]
myData[myData$continent=="Asia",]
myData[myData$continent=="Europe",]
myData[myData$continent=="North America",]
myData[myData$continent=="America",]
myData[myData$continent=="Africa",]
myData
myData
myData[myData$continent=="Americas",]
myData[myData$min(lifeExp),]
myData[myData$min(lifeExp),]
myData[myData$lifeExp==min(lifeExp),]
myData[myData$lifeExp==min(myData$lifeExp),]
myData[myData$lifeExp==max(myData$lifeExp),]
myData[1:6,]
head(myData,n=6)
read.csv("../Data/gapminder.txt")
myData <- read.table("../Data/gapminder.txt", header=TRUE)
read.csv("../Data/gapminder.txt")
dim(myData)
# CHALLENGE!
# 1. What is the overall opject structure? What function will you use??
str(myData)
# 2. Can you tell the data type of the elements in each column?
typeof(myData$country)
typeof(myData$continent)
# 2. Can you tell the data type of the elements in each column?
# country: Factor
# continent: Factor
# year: integer
# lifeExp: number
# pop: integer
# gdpPercap: number
# 3. Can you extract 3rd and 5th column of the dataset?
myData[,3,5]
#???
# 4. Can you extract the list of countries in this dataset?
countries <- myData[myData$country]
#???
# 4. Can you extract the list of countries in this dataset?
unique(myData[myData$country])
#???
# 4. Can you extract the list of countries in this dataset?
unique(myData[myData$country,])
#???
# 4. Can you extract the list of countries in this dataset?
myData[uinque(myData$country),]
#???
# 4. Can you extract the list of countries in this dataset?
myData[unique(myData$country),]
#???
# 4. Can you extract the list of countries in this dataset?
myData[myData$unique(country),]
# 4. Can you extract the list of countries in this dataset?
str(myData$country)
# 4. Can you extract the list of countries in this dataset?
unique(str(myData$country))
# 4. Can you extract the list of countries in this dataset?
myData$country[unique(),]
# 4. Can you extract the list of countries in this dataset?
myData$unique(country)
# 4. Can you extract the list of countries in this dataset?
print(unique(myData$country))
# 5. Can you get a part of this dataset that includes information about Sweden?
Sweden_data <- myData$country==Sweden
# 5. Can you get a part of this dataset that includes information about Sweden?
Sweden_data <- myData[myData$country==Sweden,]
# 5. Can you get a part of this dataset that includes information about Sweden?
Sweden_data <- myData[myData$country=="Sweden",]
Sweden_data
# 6. Can  you extract all countries for which life expectancy is below 70?
less70_data <- myData[myData$lifeExp<70,]
less70_data
less70_data
less70_data
less70_data
# 7. Can you make a new column that contains population in units of millions of people?
myNewData <- c(myData,myData$pop/1000000)
myNewData
myNewData <- data.frame(myNewData)
myNewData
# 7. Can you make a new column that contains population in units of millions of people?
popMil <- myData$pop/1000000
popMil
myNewData <- c(myData,popMil,-myData$pop)
myNewData
myNewData <- data.frame(myNewData)
myNewData
myNewData_df <- data.frame(myNewData)
myNewData_df
read.table(myNewData)
read.table("myNewData")
myData
myNewData
# 2. Can you tell the data type of the elements in each column?
typeof(myData)
# 3. Can you extract 3rd and 5th column of the dataset?
myData[,c(3,5)]
# 4. Can you extract the list of countries in this dataset?
unique(myData$country)
# OR
unique(myData[,1])
# 5. Can you get a part of this dataset that includes information about Sweden?
myData[myData$country=="Sweden",]
# 6. Can  you extract all countries for which life expectancy is below 70?
myData[myData$lifeExp<70,]
myData[myData$lifeExp==min(myData$lifeExp)]
myData[myData$lifeExp==min(myData$lifeExp),]
# 7. Can you make a new column that contains population in units of millions of people?
popMil <- myData$pop/10^6
myData$popMil
myData$popMil <- popMil
myData$popMil
#More concisely,
myData$popMil <- myData$pop/10^6
myData$popMil
#More concisely,
print(myData$popMil <- myData$pop/10^6)
myDataFull <- read.table("../Data/gapminder.txt", header=TRUE)
#Extracting
Canada <- myDataFull[myDataFull$country=="Canada"]
#Extracting
Canada <- myDataFull[myDataFull$country=="Canada",]
# Plot life expectancy over the years
# plot( x , y)
plot(Canada$year,Canada$lifeExp)
# Plot life expectancy over the years
# plot( x , y)
plot(Canada$year,Canada$lifeExp,col="blue")
# Plot life expectancy over the years
# plot( x , y)
plot(Canada$year,Canada$lifeExp,col="blue", type=l)
# Plot life expectancy over the years
# plot( x , y)
plot(Canada$year,Canada$lifeExp,col="blue", type = l)
# Plot life expectancy over the years
# plot( x , y)
plot(Canada$year,Canada$lifeExp,col="blue", type = "l")
?plot
# Plot life expectancy over the years
# plot( x , y , color , line graph)
plot(Canada$year,Canada$lifeExp,col="blue", type = "b")
# Plot life expectancy over the years
# plot( x , y , color , line graph)
plot(Canada$year,Canada$lifeExp,col="blue", type = "o")
# Plot life expectancy over the years
# plot( x , y , color , line graph)
png(Canada.png)
# Close the file
dev.off()
?dev.off
# Open the file
png("Canada.png")
plot(Canada$year,Canada$lifeExp,col="blue", type = "o")
# Close the file
dev.off()
plot(Canada$year,Canada$lifeExp,col="blue", type = "o")
rm(x,w,v3,v2,v1,score,res,popMil)
rm(v)
rm(items,itemsPhase,E2,E3)
rm(m)
rm(E1)
pwd
pwd()
getwd()
?dev.off
